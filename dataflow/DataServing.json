{
	"name": "DataServing",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_storage_file",
						"type": "LinkedServiceReference"
					},
					"name": "DimAirline"
				},
				{
					"linkedService": {
						"referenceName": "ls_storage_file",
						"type": "LinkedServiceReference"
					},
					"name": "DimFlight"
				},
				{
					"linkedService": {
						"referenceName": "ls_storage_file",
						"type": "LinkedServiceReference"
					},
					"name": "FactBookings"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_storage_file",
						"type": "LinkedServiceReference"
					},
					"name": "sinkAirline"
				},
				{
					"linkedService": {
						"referenceName": "ls_storage_file",
						"type": "LinkedServiceReference"
					},
					"name": "sinkFlights"
				}
			],
			"transformations": [
				{
					"name": "AirlineJoin"
				},
				{
					"name": "SelectCols"
				},
				{
					"name": "Aggregate"
				},
				{
					"name": "Ranking"
				},
				{
					"name": "Top5AirlineSales"
				},
				{
					"name": "FlightJoin"
				},
				{
					"name": "SelectCols1"
				},
				{
					"name": "GettingCountry"
				},
				{
					"name": "AggregatingFlightsSales"
				},
				{
					"name": "Top5CountryFlights"
				},
				{
					"name": "RankingCountry"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "alterRow2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          airline_id as short,",
				"          airline_name as string,",
				"          country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'DimAirline') ~> DimAirline",
				"source(output(",
				"          flight_id as short,",
				"          flight_number as string,",
				"          departure_timestamp as string,",
				"          arrival_timestamp as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'DimFlights') ~> DimFlight",
				"source(output(",
				"          booking_id as integer,",
				"          passenger_id as integer,",
				"          flight_id as integer,",
				"          airline_id as integer,",
				"          origin_airport_id as integer,",
				"          destination_airport_id as integer,",
				"          booking_date as date,",
				"          ticket_cost as integer,",
				"          flight_duration_mins as integer,",
				"          checkin_status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'silver',",
				"     folderPath: 'FactBookings') ~> FactBookings",
				"FactBookings, DimAirline join(FactBookings@airline_id == DimAirline@airline_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> AirlineJoin",
				"AirlineJoin select(mapColumn(",
				"          booking_id,",
				"          passenger_id,",
				"          flight_id,",
				"          airline_id = FactBookings@airline_id,",
				"          origin_airport_id,",
				"          destination_airport_id,",
				"          booking_date,",
				"          ticket_cost,",
				"          flight_duration_mins,",
				"          checkin_status,",
				"          airline_name,",
				"          country",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCols",
				"SelectCols aggregate(groupBy(airline_name),",
				"     Total_Airline_Sales = sum(ticket_cost)) ~> Aggregate",
				"Aggregate window(desc(Total_Airline_Sales, true),",
				"     Top_Ranked = denseRank()) ~> Ranking",
				"Ranking filter(Top_Ranked <= 5) ~> Top5AirlineSales",
				"DimFlight, FactBookings join(DimFlight@flight_id == FactBookings@flight_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> FlightJoin",
				"GettingCountry select(mapColumn(",
				"          flight_number,",
				"          departure_timestamp,",
				"          arrival_timestamp,",
				"          booking_id,",
				"          passenger_id,",
				"          flight_id = FactBookings@flight_id,",
				"          airline_id = FactBookings@airline_id,",
				"          origin_airport_id,",
				"          destination_airport_id,",
				"          booking_date,",
				"          ticket_cost,",
				"          flight_duration_mins,",
				"          checkin_status,",
				"          airline_name,",
				"          country",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCols1",
				"FlightJoin, DimAirline join(FactBookings@airline_id == DimAirline@airline_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> GettingCountry",
				"SelectCols1 aggregate(groupBy(country),",
				"     Total_Flight_Sales = sum(ticket_cost)) ~> AggregatingFlightsSales",
				"RankingCountry filter(Top_Ranked_Flights <= 5) ~> Top5CountryFlights",
				"AggregatingFlightsSales window(desc(Total_Flight_Sales, true),",
				"     Top_Ranked_Flights = denseRank()) ~> RankingCountry",
				"Top5AirlineSales alterRow(insertIf(1==1)) ~> alterRow1",
				"Top5CountryFlights alterRow(insertIf(1==1)) ~> alterRow2",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'gold',",
				"     folderPath: 'AirlineSales',",
				"     overwrite: true,",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkAirline",
				"alterRow2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'gold',",
				"     folderPath: 'FlightsSales',",
				"     overwrite: true,",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: true,",
				"     updateable: false,",
				"     upsertable: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkFlights"
			]
		}
	}
}