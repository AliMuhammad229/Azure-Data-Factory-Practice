{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-ali-practice"
		},
		"ls_SQL_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_SQL'"
		},
		"ls_storage_file_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_storage_file'"
		},
		"ls_fs_01_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_fs_01'"
		},
		"ls_SQL_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "adfdbpractice.database.windows.net"
		},
		"ls_SQL_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "practicedatabase"
		},
		"ls_SQL_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "adminsaad"
		},
		"ls_api_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://raw.githubusercontent.com/"
		},
		"ls_storage_file_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adfpracticeadlsgen.dfs.core.windows.net/"
		},
		"ls_fs_01_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Alifiles"
		},
		"ls_fs_01_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "aliqasim.am7@outlook.com"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/new_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 5
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_SQL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('ls_SQL_properties_typeProperties_server')]",
					"database": "[parameters('ls_SQL_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('ls_SQL_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_SQL_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_api')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('ls_api_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_storage_file')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_storage_file_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_storage_file_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SelfIRTime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_SQLtoDL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_SQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_SQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_api_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_api",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": "anshlambagit/AnshLambaYoutube/refs/heads/main/ADF_Project/DimAirport.json"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_api')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_api_datalake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_storage_file",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "DimAirport.json",
						"folderPath": "APIData",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_storage_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_api_src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_storage_file",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "DimAirport.json",
						"folderPath": "APIData",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_storage_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_dim_airline_src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_storage_file",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "DimAirline.csv",
						"folderPath": "onprem",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_storage_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_dim_passengers_src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_storage_file",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "DimPassenger.csv",
						"folderPath": "onprem",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_storage_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_dimflights_src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_storage_file",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "DimFlight.csv",
						"folderPath": "onprem",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_storage_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_emptyjson_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_storage_file",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "empty.json",
						"folderPath": "monitor/emptyjson",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_storage_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_factBookings_src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_storage_file",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "SQLData",
						"fileSystem": "bronze"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_storage_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_lookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_storage_file",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "lastload.json",
						"folderPath": "monitor/lastload",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_storage_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_onpremadls_sink_param')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_storage_file",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().p_file_name",
							"type": "Expression"
						},
						"folderPath": "onprem",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_storage_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql_datalake_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_storage_file",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "SQLData",
						"fileSystem": "bronze"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_storage_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_fs_01')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('ls_fs_01_properties_typeProperties_host')]",
					"userId": "[parameters('ls_fs_01_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_fs_01_password')]"
					}
				},
				"connectVia": {
					"referenceName": "SelfIRTime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfIRTime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataServing')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_storage_file",
								"type": "LinkedServiceReference"
							},
							"name": "DimAirline"
						},
						{
							"linkedService": {
								"referenceName": "ls_storage_file",
								"type": "LinkedServiceReference"
							},
							"name": "DimFlight"
						},
						{
							"linkedService": {
								"referenceName": "ls_storage_file",
								"type": "LinkedServiceReference"
							},
							"name": "FactBookings"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_storage_file",
								"type": "LinkedServiceReference"
							},
							"name": "sinkAirline"
						},
						{
							"linkedService": {
								"referenceName": "ls_storage_file",
								"type": "LinkedServiceReference"
							},
							"name": "sinkFlights"
						}
					],
					"transformations": [
						{
							"name": "AirlineJoin"
						},
						{
							"name": "SelectCols"
						},
						{
							"name": "Aggregate"
						},
						{
							"name": "Ranking"
						},
						{
							"name": "Top5AirlineSales"
						},
						{
							"name": "FlightJoin"
						},
						{
							"name": "SelectCols1"
						},
						{
							"name": "GettingCountry"
						},
						{
							"name": "AggregatingFlightsSales"
						},
						{
							"name": "Top5CountryFlights"
						},
						{
							"name": "RankingCountry"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "alterRow2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          airline_id as short,",
						"          airline_name as string,",
						"          country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'DimAirline') ~> DimAirline",
						"source(output(",
						"          flight_id as short,",
						"          flight_number as string,",
						"          departure_timestamp as string,",
						"          arrival_timestamp as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'DimFlights') ~> DimFlight",
						"source(output(",
						"          booking_id as integer,",
						"          passenger_id as integer,",
						"          flight_id as integer,",
						"          airline_id as integer,",
						"          origin_airport_id as integer,",
						"          destination_airport_id as integer,",
						"          booking_date as date,",
						"          ticket_cost as integer,",
						"          flight_duration_mins as integer,",
						"          checkin_status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'FactBookings') ~> FactBookings",
						"FactBookings, DimAirline join(FactBookings@airline_id == DimAirline@airline_id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> AirlineJoin",
						"AirlineJoin select(mapColumn(",
						"          booking_id,",
						"          passenger_id,",
						"          flight_id,",
						"          airline_id = FactBookings@airline_id,",
						"          origin_airport_id,",
						"          destination_airport_id,",
						"          booking_date,",
						"          ticket_cost,",
						"          flight_duration_mins,",
						"          checkin_status,",
						"          airline_name,",
						"          country",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCols",
						"SelectCols aggregate(groupBy(airline_name),",
						"     Total_Airline_Sales = sum(ticket_cost)) ~> Aggregate",
						"Aggregate window(desc(Total_Airline_Sales, true),",
						"     Top_Ranked = denseRank()) ~> Ranking",
						"Ranking filter(Top_Ranked <= 5) ~> Top5AirlineSales",
						"DimFlight, FactBookings join(DimFlight@flight_id == FactBookings@flight_id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FlightJoin",
						"GettingCountry select(mapColumn(",
						"          flight_number,",
						"          departure_timestamp,",
						"          arrival_timestamp,",
						"          booking_id,",
						"          passenger_id,",
						"          flight_id = FactBookings@flight_id,",
						"          airline_id = FactBookings@airline_id,",
						"          origin_airport_id,",
						"          destination_airport_id,",
						"          booking_date,",
						"          ticket_cost,",
						"          flight_duration_mins,",
						"          checkin_status,",
						"          airline_name,",
						"          country",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCols1",
						"FlightJoin, DimAirline join(FactBookings@airline_id == DimAirline@airline_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> GettingCountry",
						"SelectCols1 aggregate(groupBy(country),",
						"     Total_Flight_Sales = sum(ticket_cost)) ~> AggregatingFlightsSales",
						"RankingCountry filter(Top_Ranked_Flights <= 5) ~> Top5CountryFlights",
						"AggregatingFlightsSales window(desc(Total_Flight_Sales, true),",
						"     Top_Ranked_Flights = denseRank()) ~> RankingCountry",
						"Top5AirlineSales alterRow(insertIf(1==1)) ~> alterRow1",
						"Top5CountryFlights alterRow(insertIf(1==1)) ~> alterRow2",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'AirlineSales',",
						"     overwrite: true,",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkAirline",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'FlightsSales',",
						"     overwrite: true,",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkFlights"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_storage_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DP_API_ingestion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WebAPICall",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://raw.githubusercontent.com/anshlambagit/AnshLambaYoutube/refs/heads/main/ADF_Project/DimAirport.json"
						}
					},
					{
						"name": "CopyAPIData",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "WebAPICall",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['airport_id']"
										},
										"sink": {
											"path": "$['airport_id']"
										}
									},
									{
										"source": {
											"path": "$['airport_name']"
										},
										"sink": {
											"path": "$['airport_name']"
										}
									},
									{
										"source": {
											"path": "$['city']"
										},
										"sink": {
											"path": "$['city']"
										}
									},
									{
										"source": {
											"path": "$['country']"
										},
										"sink": {
											"path": "$['country']"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "ds_api_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_api_datalake",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-24T21:07:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_api_data')]",
				"[concat(variables('factoryId'), '/datasets/ds_api_datalake')]"
			]
		}
	]
}